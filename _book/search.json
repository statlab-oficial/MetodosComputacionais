[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Métodos Computacionais",
    "section": "",
    "text": "Prefácio\nEste livro resulta de anos de experiência em sala de aula dos professores Ronald Targino, Rafael Braz, Juvêncio Nobre e Manoel Santos-Neto. Destina-se a apoiar os alunos da graduação em Estatística e do Programa de Pós-Graduação em Modelagem e Métodos Quantitativos (PPGMMQ) do Departamento de Estatística e Matemática Aplicada (DEMA) da Universidade Federal do Ceará (UFC).\nAo longo dos capítulos, abordamos a geração de números aleatórios (discretos e contínuos); métodos de suavização; simulação estocástica por inversão, rejeição e composição, bem como métodos de reamostragem; métodos de aproximação e integração; quadratura Gaussiana, integração de Monte Carlo e quadratura adaptativa; métodos de Monte Carlo em sentido amplo; amostradores MCMC, com ênfase em Gibbs e Metropolis–Hastings; otimização numérica via Newton–Raphson, Fisher scoring e quase-Newton, além do algoritmo EM; Bootstrap e Jackknife; diagnóstico de convergência; e aspectos computacionais em problemas práticos, com foco em implementação eficiente, estabilidade numérica e reprodutibilidade dos resultados.\nEsperamos que este material sirva não apenas como texto-base para as disciplinas Estatística Computacional (graduação em Estatística) e Métodos Computacionais em Estatística (Mestrado-PPGMMQ), mas também como suporte para aqueles que desejam programar com qualidade na área de Estatística.",
    "crumbs": [
      "Prefácio"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Motivação",
    "section": "",
    "text": "2.1 Atividade: Problema do Aniversário (22 jogadores)\nObjetivos\n- Estimar, via simulação, a probabilidade de coincidência de aniversários.\n- Relacionar frequência relativa, Lei dos Grandes Números e variação amostral.\nHipóteses\n- 365 dias equiprováveis, datas independentes, ignorar bissexto/gêmeos.\nMateriais\n- R (ou Posit Cloud), roteiro com comandos sample(), table(), mean().",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivação</span>"
    ]
  },
  {
    "objectID": "intro.html#solução-analítica",
    "href": "intro.html#solução-analítica",
    "title": "2  Motivação",
    "section": "2.2 Solução Analítica",
    "text": "2.2 Solução Analítica",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivação</span>"
    ]
  },
  {
    "objectID": "intro.html#solução-aproximada",
    "href": "intro.html#solução-aproximada",
    "title": "2  Motivação",
    "section": "2.3 Solução Aproximada",
    "text": "2.3 Solução Aproximada",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivação</span>"
    ]
  },
  {
    "objectID": "intro.html#comparação-entre-a-solução-exata-e-aproximada",
    "href": "intro.html#comparação-entre-a-solução-exata-e-aproximada",
    "title": "2  Motivação",
    "section": "2.4 Comparação entre a solução exata e aproximada",
    "text": "2.4 Comparação entre a solução exata e aproximada",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivação</span>"
    ]
  },
  {
    "objectID": "intro.html#comparação-entre-as-soluções-exata-e-aproximada",
    "href": "intro.html#comparação-entre-as-soluções-exata-e-aproximada",
    "title": "2  Motivação",
    "section": "2.4 Comparação entre as soluções exata e aproximada",
    "text": "2.4 Comparação entre as soluções exata e aproximada",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivação</span>"
    ]
  },
  {
    "objectID": "intro.html#possíveis-dúvidas",
    "href": "intro.html#possíveis-dúvidas",
    "title": "2  Motivação",
    "section": "2.5 Possíveis dúvidas",
    "text": "2.5 Possíveis dúvidas\nAlgumas dúvidas podem surgir, entre elas:\n\n\n\n\n\n\n\nFalk, Ruma. 2014. “A Closer Look at the Notorious Birthday Coincidences”. Teaching Statistics 36 (2): 41–46. https://doi.org/10.1111/test.12014.\n\n\nMartins, Rui Manuel Da Costa. 2018. “Learning the Principles of Simulation Using the Birthday Problem”. Teaching Statistics 40 (3): 108–11. https://doi.org/10.1111/test.12164.\n\n\nMatthews, Robert, e Fiona Stones. 1998. “Coincidences: the truth is out there”. Teaching Statistics 20 (1): 17–19. https://doi.org/https://doi.org/10.1111/j.1467-9639.1998.tb00752.x.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivação</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Falk, Ruma. 2014. “A Closer Look at the Notorious Birthday\nCoincidences.” Teaching Statistics 36 (2): 41–46. https://doi.org/10.1111/test.12014.\n\n\nHodgson, Ted, and Maurice Burke. 2000. “On Simulation and the\nTeaching of Statistics.” Teaching Statistics 22 (3):\n91–96. https://doi.org/10.1111/1467-9639.00033.\n\n\nMartins, Rui Manuel Da Costa. 2018. “Learning the Principles of\nSimulation Using the Birthday Problem.” Teaching\nStatistics 40 (3): 108–11. https://doi.org/10.1111/test.12164.\n\n\nMatthews, Robert, and Fiona Stones. 1998. “Coincidences: The Truth\nIs Out There.” Teaching Statistics 20 (1): 17–19.\nhttps://doi.org/https://doi.org/10.1111/j.1467-9639.1998.tb00752.x.\n\n\nThomas, F. H., and J. L. Moore. 1980. “CUSUM:\nComputer Simulation for Statistics Teaching.” Teaching\nStatistics 2 (1): 23–28. https://doi.org/10.1111/j.1467-9639.1980.tb00374.x.\n\n\nTintle, Nathan, Beth Chance, George Cobb, Soma Roy, Todd Swanson, and\nJill VanderStoep. 2015. “Combating Anti-Statistical Thinking Using\nSimulation-Based Methods Throughout the Undergraduate\nCurriculum.” The American Statistician 69 (4): 362–70.\nhttps://doi.org/10.1080/00031305.2015.1081619.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "introducao.html",
    "href": "introducao.html",
    "title": "1  Introdução",
    "section": "",
    "text": "A simulação tem um papel preponderante na estatística moderna, e suas vantagens no ensino de Estatística são conhecidas há muito tempo. Em um de seus primeiros números, o periódico Teaching Statistics publicou artigos que aludem precisamente a isso. Thomas e Moore (1980) afirmaram que “a introdução do computador na sala de aula escolar trouxe uma nova técnica para o ensino, a técnica da simulação”. Zieffler e Garfield (2007) e Tintle et al. (2015) discutem o papel e a importância da aprendizagem baseada em simulação no currículo de graduação em Estatística. No entanto, outros autores (por exemplo, Hodgson e Burke 2000) discutem alguns problemas que podem surgir ao ensinar uma disciplina por meio de simulação, a saber, o desenvolvimento de certos equívocos na mente dos estudantes (Martins 2018).\n\n\n\n\nHodgson, Ted, e Maurice Burke. 2000. “On Simulation and the Teaching of Statistics”. Teaching Statistics 22 (3): 91–96. https://doi.org/10.1111/1467-9639.00033.\n\n\nMartins, Rui Manuel Da Costa. 2018. “Learning the Principles of Simulation Using the Birthday Problem”. Teaching Statistics 40 (3): 108–11. https://doi.org/10.1111/test.12164.\n\n\nThomas, F. H., e J. L. Moore. 1980. “CUSUM: Computer Simulation for Statistics Teaching”. Teaching Statistics 2 (1): 23–28. https://doi.org/10.1111/j.1467-9639.1980.tb00374.x.\n\n\nTintle, Nathan, Beth Chance, George Cobb, Soma Roy, Todd Swanson, e Jill VanderStoep. 2015. “Combating Anti-Statistical Thinking Using Simulation-Based Methods Throughout the Undergraduate Curriculum”. The American Statistician 69 (4): 362–70. https://doi.org/10.1080/00031305.2015.1081619.\n\n\nZieffler, Andrew, e Joan B. Garfield. 2007. “Studying the Role of Simulation in Developing Students’ Statistical Reasoning”. Em Proceedings of the 56th Session of the International Statistical Institute (ISI). International Statistical Institute.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Números Uniformes",
    "section": "",
    "text": "3.1 Geração de sequências \\(U(0,1)\\)\nUma abordagem é utilizar dispositivos físicos aleatorizadores, como máquinas que sorteiam números de loteria, roletas ou circuitos eletrônicos que produzem “ruído aleatório”. Contudo, tais dispositivos apresentam desvantagens:\nUma forma simples de obter reprodutibilidade é armazenar a sequência em um dispositivo de memória (HD, CD-ROM, livro). De fato, a RAND Corporation publicou A Million Random Digits with 100 000 Random Normal Deviates (1955). Entretanto, acessar armazenamento externo milhares ou milhões de vezes torna a simulação lenta.\nAssim, a abordagem preferida é gerar números pseudoaleatórios em tempo de execução, via recorrências determinísticas sobre inteiros. Isso permite:\nEntretanto, a escolha inadequada da recorrência pode gerar sequências com baixa qualidade estatística.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Números Uniformes</span>"
    ]
  },
  {
    "objectID": "summary.html#geração-de-sequências-u01",
    "href": "summary.html#geração-de-sequências-u01",
    "title": "3  Números Uniformes",
    "section": "",
    "text": "Baixa velocidade e dificuldade de integração direta com computadores.\nNecessidade de reprodutibilidade da sequência. Por exemplo, para verificação de código ou comparação de políticas em um modelo de simulação, usando a mesma sequência para reduzir a variância da diferença entre resultados.\n\n\n\n\nGeração rápida;\nEliminação do problema de armazenamento;\nReprodutibilidade controlada.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Números Uniformes</span>"
    ]
  },
  {
    "objectID": "summary.html#geradores-congruenciais-lineares",
    "href": "summary.html#geradores-congruenciais-lineares",
    "title": "3  Números Uniformes",
    "section": "3.2 Geradores Congruenciais Lineares",
    "text": "3.2 Geradores Congruenciais Lineares\nUm Gerador Congruencial Linear (LGC) produz uma sequência de inteiros não negativos \\(X_i\\), \\(i = 1, 2, \\ldots\\), por meio da relação de recorrência:\n\\[X_i = (a X_{i-1} + c) \\bmod m, \\quad i = 1, 2, \\ldots,\\] em que \\(a &gt; 0\\) é o multiplicador, \\(X_0 \\ge 0\\) é a semente (seed), \\(c \\ge 0\\) é o incremento e \\(m &gt; 0\\) é o módulo.\nOs valores \\(a, c, X_0\\) estão no intervalo \\([0, m-1]\\). O número pseudoaleatório \\(R_i\\) é obtido por:\n\\[R_i = \\frac{X_i}{m}, \\quad R_i \\in (0,1).\\]\nSe \\(m\\) for suficientemente grande, os valores discretos \\(0/m, 1/m, \\ldots, (m-1)/m\\) são tão próximos que \\(R_i\\) pode ser tratado como variável contínua.\n\n3.2.1 Exemplo\nSeja o gerador:\n\\[X_i = (9 X_{i-1} + 3) \\bmod 24, \\quad i \\geq 1.\\]\nEscolhendo \\(X_0 = 3\\):\n\\[X_1 = (9 \\times 3 + 3) \\bmod 24 = 14\\]\n\\[X_2 = (9 \\times 14 + 3) \\bmod 24 = 1\\]\ne assim por diante.\nA sequência \\(R_i = X_i / 16\\) gerada terá período \\(\\ell = 16\\).\n\n\n3.2.2 Implementação em R\n\n# Função LCG genérica\nlcg &lt;- function(a, c, m, seed, n) {\n  x &lt;- numeric(n)\n  x[1] &lt;- seed\n  for (i in 2:n) {\n    x[i] &lt;- (a * x[i-1] + c) %% m\n  }\n  r &lt;- x / m\n  return(list(X = x, R = r))\n}\n\n# Exemplo com a = 9, c = 3, m = 24, seed = 3\nresultado &lt;- lcg(a = 9, c = 3, m = 24, seed = 3, n = 20)\nresultado$X\n\n [1]  3  6  9 12 15 18 21  0  3  6  9 12 15 18 21  0  3  6  9 12\n\nresultado$R\n\n [1] 0.125 0.250 0.375 0.500 0.625 0.750 0.875 0.000 0.125 0.250 0.375 0.500\n[13] 0.625 0.750 0.875 0.000 0.125 0.250 0.375 0.500",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Números Uniformes</span>"
    ]
  },
  {
    "objectID": "summary.html#geradores-congruenciais-lineares-mistos",
    "href": "summary.html#geradores-congruenciais-lineares-mistos",
    "title": "3  Números Uniformes",
    "section": "3.3 Geradores Congruenciais Lineares Mistos",
    "text": "3.3 Geradores Congruenciais Lineares Mistos\nNos LCGs mistos temos \\(c&gt;0\\). Uma escolha prática é \\(m = 2^b\\), onde \\(b\\) é o número de bits utilizável para inteiros positivos na arquitetura/linguagem. Em muitos ambientes, inteiros usam 32 bits (um para o sinal), implicando \\(b=31\\) e intervalo \\([-2^{31}, 2^{31}-1]\\).\nQuando \\(m=2^b\\), obtemos período completo (\\(\\ell=m\\)) se:\n\n\\(c\\) é ímpar (garante \\(\\gcd(c,m)=1\\));\n\n\\(a-1\\) é múltiplo de todos os fatores primos de \\(m\\) e também de 4 (como \\(m\\) é potência de 2).\n\nEssa é a razão de geradores simples com \\(m=2^b\\), \\(c\\) ímpar e \\(a \\equiv 1 \\pmod 4\\) atingirem \\(\\ell=m\\).\n\n3.3.1 Questão de estouro e aritmética modular\nEm linguagens com inteiros limitados, calcular \\(aX_{i-1}+c\\) pode transbordar. Soluções comuns:\n\nusar precisão estendida (64 bits) ou bibliotecas de inteiros grandes;\nempregar truques de aritmética modular (como o método de Schrage) para evitar overflow;\ntrabalhar com módulo \\(m=2^b\\) e aproveitar o “wrap” de bits.\n\nA seguir, implementamos LCG misto com \\(m=2^{31}\\), \\(a=906185749\\), \\(c=1\\). Parâmetros com boas propriedades estatísticas relatadas na literatura.\n\n\n3.3.2 Implementação em R (com segurança de overflow)\nPara garantir a correção do módulo com inteiros grandes, usaremos bit64 (inteiros de 64 bits) e normalizaremos para \\((0,1)\\).\n\n#if (!requireNamespace(\"bit64\", quietly = TRUE)) {\n#  install.packages(\"bit64\")\n#}\nlibrary(bit64)\n\nlcg_misto &lt;- function(n, seed = 3456L,\n                      a = 906185749L,\n                      c = 1L,\n                      m = bit64::as.integer64(2)^31) {\n  # Trabalha em integer64 para evitar perda de precisão\n  x &lt;- bit64::as.integer64(seed)\n  outX &lt;- bit64::integer64(n)\n  outR &lt;- numeric(n)\n  outX[1] &lt;- x\n  outR[1] &lt;- as.double(x) / as.double(m)\n  for (i in 2:n) {\n    x &lt;- (bit64::as.integer64(a) * x + bit64::as.integer64(c)) %% m\n    outX[i] &lt;- x\n    outR[i] &lt;- as.double(x) / as.double(m)\n  }\n  list(X = outX, R = outR)\n}\n\n# Exemplo: primeiros 5 números com seed = 3456\nset.seed(NULL)\ng1 &lt;- lcg_misto(n = 5, seed = 3456L)\ng1$X\n\ninteger64\n[1] 3456       746789761  460230038  1591485775 1024426876\n\ng1$R\n\n[1] 1.609325e-06 3.477511e-01 2.143113e-01 7.410933e-01 4.770359e-01",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Números Uniformes</span>"
    ]
  },
  {
    "objectID": "summary.html#geradores-congruenciais-lineares-multiplicativos",
    "href": "summary.html#geradores-congruenciais-lineares-multiplicativos",
    "title": "3  Números Uniformes",
    "section": "3.4 Geradores Congruenciais Lineares Multiplicativos",
    "text": "3.4 Geradores Congruenciais Lineares Multiplicativos\nNo caso multiplicativo, temos \\(c = 0\\), e a recorrência fica:\n\\[\nX_i = (a X_{i-1}) \\bmod m\n\\]\n\n3.4.1 Características e restrições\n\nSe \\(X_i = 0\\) em algum passo, toda a sequência futura será zero — portanto \\(X_0 \\neq 0\\).\nSe \\(a = 1\\), a sequência é constante — também deve ser evitado.\nO período máximo possível é \\(m - 1\\), e ele só é atingido quando:\n\n\\(m\\) é primo;\n\\(a\\) é uma raiz primitiva módulo \\(m\\).\n\n\n\n\n3.4.2 Definição de raiz primitiva\nUm número \\(a\\) é raiz primitiva módulo \\(m\\) se seus poderes geram todos os inteiros não nulos módulo \\(m\\).\nMatematicamente, \\(a\\) satisfaz:\n\\[\nm \\nmid a^{(m-1)/q} - 1, \\quad \\forall q \\text{ primo que divide } m-1\n\\]\nEsse tipo de gerador é chamado Gerador de Módulo Primo e Período Máximo.\n\n\n\n3.4.3 Exemplo de implementação em R\nA seguir, implementamos um gerador multiplicativo com módulo primo \\(m = 2^{31} - 1\\) (primo de Mersenne) e multiplicador \\(a = 630360016\\), conhecido por apresentar boas propriedades estatísticas.\n\n#if (!requireNamespace(\"gmp\", quietly = TRUE)) {\n#  install.packages(\"gmp\")\n#}\nlibrary(gmp)\n\nlcg_mult_primo &lt;- function(n, seed, a = 630360016, m = 2147483647) {\n  A &lt;- as.bigz(a); M &lt;- as.bigz(m)\n  x &lt;- as.bigz(seed)\n  X &lt;- integer(n); R &lt;- numeric(n)\n  for (i in seq_len(n)) {\n    X[i] &lt;- as.integer(x)    \n    R[i] &lt;- as.numeric(x) / m    \n    x &lt;- (A * x) %% M            \n  }\n  list(X = X, R = R)\n}\n\n# Exemplo: gerar 10 valores\ng2 &lt;- lcg_mult_primo(n = 10, seed = 12345L)\ng2$X\n\n [1]      12345 1461144439 1646755962  423395703 2041926374  720397004\n [7]  140279311  597861375  629442282  759842328\n\ng2$R\n\n [1] 5.748589e-06 6.803984e-01 7.668305e-01 1.971590e-01 9.508461e-01\n [6] 3.354610e-01 6.532264e-02 2.784009e-01 2.931069e-01 3.538292e-01",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Números Uniformes</span>"
    ]
  }
]